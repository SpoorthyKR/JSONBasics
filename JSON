JSON: What It Is, How It Works, & How to Use It



What Is JSON?
JSON is short for JavaScript Object Notation, and is a way to store information in an organized, easy-to-access manner.
 In a nutshell, it gives us a human-readable collection of data that we can access in a really logical manner.

Storing JSON Data
As a simple example, information about me might be written in JSON as follows:

var Spoorthy = {
	"age" : "27",
	"hometown" : "Mississauga, CA",
	"gender" : "Female"
};

This creates an object that we access using the variable Spoorthy. 
By enclosing the variable’s value in curly braces, 
we’re indicating that the value is an object. 
Inside the object, we can declare any number of properties using a "name": "value" pairing, separated by commas.
 To access the information stored in Spoorthy, we can simply refer to the name of the property we need. For instance, to access information about me, 
 we could use the following snippets:

document.write('Spoorthy is ' Spoorthy.age); // Output: Spoorthy is 27
document.write('Spoorthy is a ' Spoorthy.gender); // Output: Spoorthy is a Female


Storing JSON Data in Arrays
A slightly more complicated example involves storing two people in one variable. 
To do this, we enclose multiple objects in square brackets, which signifies an array. 
For instance, if I needed to include information about myself and my brother in one variable, I might use the following:

var family = [{
    "name" : "Spoorthy",
    "age" : "27",
    "gender" : "Female"
},
{
    "name" : "Shiv",
    "age" : "30",
    "gender" : "male"
},
{
    "name" : "Jim",
    "age" : "29",
    "gender" : "male"
},
{
    "name" : "Ginni",
    "age" : "32",
    "gender" : "Female"
},

];


To access this information, we need to access the array index of the person we wish to access. For example, we would use the following snippet to 
access info stored in family:

document.write(family[1].name); // Output: Shiv
document.write(family[0].age); // Output: 27

NOTE: This is beneficial if it will be necessary to loop through stored information, as it lends itself to a for loop with an automatically incrementing value.

Nesting JSON Data
Another way to store multiple people in our variable would be to nest objects. To do this, we would create something similar to the following:

var family = {
    "Spoorthy" : {
        "name" : "Spoorthy Rajashekar",
        "age" : "27",
        "gender" : "Female"
    },
    "Shiv" : {
        "name" : "Shiv Patil",
        "age" : "30",
        "gender" : "male"
    }
}

Accessing information in nested objects is a little easier to understand; to access information in the object, we would use the following snippet:

document.write(family.Spoorthy.name); // Output: Spoorthy Rajashekar
document.write(family.Shiv.age); // Output: 30
document.write(family.Spoorthy.gender); // Output: Female


NESTED JSON AND ARRAYS CAN BE COMBINED AS NEEDED TO STORE AS MUCH DATA AS NECESSARY.

Why Does JSON Matter?
With the rise of AJAX-powered sites, it’s becoming more and more important for sites to be able to load data quickly and asynchronously, or 
in the background without delaying page rendering. 
Switching up the contents of a certain element within our layouts without requiring a page refresh adds a “wow” factor to our applications,
 not to mention the added convenience for our users. Because of the popularity and ease of social media, 
 

How Do We Load JSON into a Project?
One of the easiest ways to load JSON data into our web applications is to use the $.ajax() method available in the jQuery library. 
The ease of retrieving data will vary based on the site providing the data, but a simple example might look like this:

$.ajax(
    type:'GET',
    url:"http://example.com/users/feeds/",
    data:"format=json&id=123",
    success:function(feed) {
        document.write(feed);
    },
    dataType:'jsonp'
);

This example would request the latest feed items in JSON format and output them to the browser. 
Obviously, we wouldn’t want to output raw JSON data to the browser, but this example shows the basics of loading JSON from an external source.
